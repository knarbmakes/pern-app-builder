import { Request, Response, NextFunction } from 'express';
import pino from 'pino';
import pinoHttp from 'pino-http';
import { ulid } from 'ulid';
import { AsyncLocalStorage } from 'async_hooks';

// Used for storing request level child logger.
export const asyncContext = new AsyncLocalStorage();

const customReqSerializer = (req: any): Record<string, any> => {
  return {
    requestId: req.id,
    method: req.method,
    url: req.url,
    query: req.query,
    params: req.params,
  };
};

const customResSerializer = (res: any): Record<string, any> => {
  return {
    statusCode: res.statusCode,
    responseTime: res.responseTime,
  };
};

const customErrSerializer = (err: any): Record<string, any> => {
  return {
    type: err.type,
    message: err.message,
    stack: err.stack,
  };
};

const baseLogger = pino({
  level: 'debug',
});

export const logger = new Proxy(baseLogger, {
  get(target, property, receiver) {
    target = (asyncContext.getStore() as any)?.get('logger') || target;
    return Reflect.get(target, property, receiver);
  },
});

// Generate a unique ID for each incoming request and store a child logger in context
// to always log the request ID
export const requestContextLogsMiddleware = (req: Request, _res: Response, next: NextFunction) => {
  // Use the request id generated by pinoHttp
  const child = baseLogger.child({ requestId: req.id });
  const store = new Map();
  store.set('logger', child);
  child.info({ method: req.method, url: req.url }, 'new request');
  return asyncContext.run(store, next, 'route');
};

export const pinoMiddleware = pinoHttp({
  logger: baseLogger,
  genReqId: () => ulid(),
  serializers: {
    req: customReqSerializer,
    res: customResSerializer,
    err: customErrSerializer,
  },
});
